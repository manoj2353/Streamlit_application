# -*- coding: utf-8 -*-
"""Healtcare_web_application.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VZG8UoqCPKQg2MME_vJ81EdxwaMKPG7F
"""

! pip install streamlit -q

!pip install streamlit-option-menu

from google.colab import drive
drive.mount('/content/drive/')

import gc
import pickle
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

pick_read = open('/content/drive/MyDrive/Colab Notebooks/Heart.pkl','rb')
model = pickle.load(pick_read)
pick_read.close()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pickle
# 
# from streamlit_option_menu import option_menu
# # 2. horizontal menu
# 
# 
# 
# 
# def Heart_page():
#     st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Heart Disease Predictor</h1>", unsafe_allow_html=True)
#     st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do  the rest.</h3>", unsafe_allow_html=True)
#     #st.markdown("<h4 style='text-align: center; color: Black;'>Submission for The Python Week</h4>", unsafe_allow_html=True)
#     st.sidebar.header("Heart Disease Prediction with the Help of Machine Learning")
#     st.sidebar.markdown("It a Web app that would help the user in determining whether they will get a Heart disease or not.",unsafe_allow_html=True)
#     st.sidebar.header("What tools where used to make this?")
#     st.sidebar.markdown("The Random Forest Classifier Machine learning algorithm was trained by using Heart Disease Dataset obtained from kaggle and it was built to make accurate prediction about Heart Diseases ")
#     Age = st.number_input("Age of a Patient",0,100) 
#     Sex = st.number_input("Gender of a Patient (Please Choose 0-> Male, 1-> Female)",0,1)
#     ChestPainType = st.number_input("Chest Pain Type (Please Choose 0-> ASY; 1->ATA; 2->NAP; 3->TA )",0,4) 
#     RestingBP = st.number_input("Resting Blood Pressure",0,500) 
#     Cholesterol = st.number_input("Cholesterol Level",0,500)
#     FastingBS = st.number_input("Fasting Blood Sugar",0,1)
#     RestingECG = st.number_input("Resting Electro Cardiogram (Please Choose 0-> LVH; 1->Normal; 2-> ST )",0,1)
#     MaxHR = st.number_input("Maximum Heart Rate",0,1000)
#     ExerciseAngina = st.number_input("Exercise Angina (Please Choose 0->No; 1->Yes )",0,1)
#     Oldpeak = st.number_input("Oldpeak of the heart",0.0,10.0)
#     ST_Slope = st.number_input("ST_Slope of the herart ( Please Choose 0->Down; 1->Flat; 2->Up )",0,1)
# 
#     inputs = [[Age,Sex,ChestPainType,RestingBP,Cholesterol,FastingBS,RestingECG,MaxHR,ExerciseAngina,Oldpeak,ST_Slope]]
#     if st.button('Predict'):
#      loaded_model=pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Heart.pkl','rb'))
#      prediction=loaded_model.predict(inputs)
#      updated_res = prediction.flatten().astype(float)
# 
#      if(updated_res==1):
#       st.success('There is a High Probabality of Getting Heart Diseases')
#      else :
#       st.success('Your are Out of Risk and There is Low Probability of getting heart Diseases ')
#       
#  # Contents of ~/my_app/streamlit_app.py
# import streamlit as st
# #def main_page():
#     #st.markdown("# Main page")
#     #st.sidebar.markdown("# Main page")
#     #st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Disease Prediction Web Application</h1>", unsafe_allow_html=True)
#     #st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do  the rest.</h3>", unsafe_allow_html=True)
# 
# def Kidney_page():
#     #st.markdown("#Kidney")
#     #st.sidebar.markdown("# Page 2")
#     st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Kidney Disease Predictor</h1>", unsafe_allow_html=True)
#     st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do  the rest.</h3>", unsafe_allow_html=True)
#     st.sidebar.header("Kidney Disease Prediction with the Help of Machine Learning")
#     st.sidebar.markdown("It a Web app that would help the user in determining whether they will get a Chronic Kidney disease or not.",unsafe_allow_html=True)
#     st.sidebar.header("What tools where used to make this?")
#     st.sidebar.markdown("The Random Forest Classifier Machine learning algorithm was trained by using chronic kidnet Disease Dataset obtained from kaggle and the model was built to make accurate prediction about geting chronic kidney Diseases ")
#     Age = st.number_input("Age of a Patient",0,100)
#     bp = st.number_input("Blood Pressure(bp)",0,200)
#     sg = st.number_input("Urine Specific Gravity Value",0.00,2.00)
#     al = st.number_input("Albumin Value",0.0,5.0)
#     su = st.number_input("Sugar Value",0.0,5.0)
#     pu = st.number_input("Pus Cells (Please Choose 0-> Abnormal; 1-> Normal)",0,1)
#     pcc = st.number_input("pus cells clumps (Please Choose 0-> Not Present; 1-> Present)",0,1)
#     bgr = st.number_input("Blood Glucose Random Value",0.000,600.000)
#     bu = st.number_input("Blood Urea Value",0.00,500.00)
#     sc = st.number_input("Serum Creatinine Value",0.0,100.0)
#     sod = st.number_input("Sodium",0.000000,200.000000)
#     pot = st.number_input("Potassium",0.000000,100.000000)
#     hemo = st.number_input("Heamoglobin",0.000000,100.000000)
#     htn = st.number_input("Hypertension (Please Choose 0-> No; 1-> Yes)",0,1)
#     dm = st.number_input("Diabetes Mellitus (Please Choose 0-> No; 1-> Yes)",0,1)
#     cad = st.number_input("Coronary Artery Disease (Please Choose 0-> No; 1-> TNO; 2->Yes)",0,2)
#     appet = st.number_input("Appetite (Please Choose 0-> Good; 1-> Poor)",0,1)
#     pe = st.number_input("Peda_Edema (Please Choose 0-> No; 1-> Yes)",0,1)
#     ane = st.number_input("Aanemia",0,5)
#     
#     inputs = [[Age,bp,sg,al,su,pu,pcc,bgr,bu,sc,sod,pot,hemo,htn,dm,cad,appet,pe,ane]]
#     if st.button('Predict'):
#      loaded_model=pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Kidney.pkl','rb'))
#      prediction=loaded_model.predict(inputs)
#      updated_res = prediction.flatten().astype(float)
#      if(updated_res==0):
#       st.success('There is a High Probabality of Getting Chronic Kidney Diseases')
#      else :
#       st.success('Your are Out of Risk and There is Low Probability of Getting Chronic Kidney Diseases ')
#       
#       
#     
# def liver_page():
#     #st.markdown("#Liver")
#     #st.sidebar.markdown("# Page 3")
#     st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Liver Disease Predictor</h1>", unsafe_allow_html=True)
#     st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do  the rest.</h3>", unsafe_allow_html=True)
#     st.sidebar.header("Liver Disease Prediction with the Help of Machine Learning")
#     st.sidebar.markdown("It a Web app that would help the user in determining whether they will get a Liver disease or not.",unsafe_allow_html=True)
#     st.sidebar.header("What tools where used to make this?")
#     st.sidebar.markdown("The Liner Regression(LR) Machine learning algorithm was trained by using Liver Disease Dataset obtained from kaggle and it was built to make accurate prediction about getting liver disease or not")
#     Age = st.number_input("Age of a Patient",0,100)
#     Gender = st.number_input("Gender of a patient (Please Choose 0-> Male, 1-> Female)",0,1)
#     Total_Bilirubin = st.number_input("Total Bilirubin Value",0.0,100.0)
#     Direct_Bilirubin = st.number_input("Direct Bilirubin Value",0.00,30.00)
#     Alkaline_Phosphotase = st.number_input("Alkaline Phosphotase value",0.00,3000.000)
#     Alamine_Aminotransferace = st.number_input(" Alamine Aminotransferace Value",0.00,2500.00)
#     Aspertate_Aminotransferace =st.number_input(" Aspertate Aminotransferace Value",0.00,5000.00)
#     Total_Proteins =st.number_input("Total Proteins",0.00,10.00)
#     Albumin = st.number_input("Albumin Value",0.00,10.00)
#     Albumin_and_Globulin_Ratio = st.number_input("Albumin and Globulin Ratio",0.00,10.00)
# 
#     inputs = [[Age,Gender,Total_Bilirubin,Direct_Bilirubin,Alkaline_Phosphotase,Alamine_Aminotransferace,Aspertate_Aminotransferace,Total_Proteins,Albumin,Albumin_and_Globulin_Ratio]]
#     if st.button('Predict'):
#      loaded_model=pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Liver.pkl','rb'))
#      prediction=loaded_model.predict(inputs)
#      updated_res = prediction.flatten().astype(float)
#      if(updated_res==1):
#       st.success('There is a High Probabality of getting Liver Diseases')
#      else :
#       st.success('Your are Out of Risk and There is Low Probability of getting Liver Diseases ')
#       
# def Cancer_page():
#     #st.markdown("#Cancer ")
#     #st.sidebar.markdown("# Page 3")
#     st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Cancer Disease Predictor</h1>", unsafe_allow_html=True)
#     st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do  the rest.</h3>", unsafe_allow_html=True)
#     st.sidebar.header("Cancer Disease Prediction with the Help of Machine Learning")
#     st.sidebar.markdown("It a Web app that would help the user in determining whether they will get a Cancer disease or not.",unsafe_allow_html=True)
#     st.sidebar.header("What tools where used to make this?")
#     st.sidebar.markdown("The Random Forest Classifier Machine learning algorithm was trained by using Cancer Disease Dataset obtained from kaggle and it was built to make accurate prediction about getting cancer diseass or not ")
#     Age = st.number_input(" Age of a Patient",0,100)
#     Gender = st.number_input("Gender of a Patient (Please Choose 2-> Male, 1-> Female)",1,2)
#     Air_Pollution = st.number_input("Air Pollution",0,100)
#     Alcohol_use = st.number_input("Alcohol Use",0,100)
#     Dust_Allergy = st.number_input("Dust Allergy",0,100)
#     Occupational_Hazards = st.number_input("Occupational Hazards",0,100)
#     Genetic_Risk = st.number_input("Genetic Risk",0,100)
#     Chronic_Lung_Disease = st.number_input("Chronic Lung Disease",0,100)
#     Balanced_Diet = st.number_input("Balanced Diet",0,100)
#     Obesity = st.number_input("Obesity",0,100)
#     Smoking = st.number_input("Smoking",0,100)
#     Passive_Smoker = st.number_input("Passive Smoker",0,100)
#     Chest_Pain = st.number_input("Chest Pain",0,100)
#     Coughing_of_Blood = st.number_input("Coughing of Blood",0,100)
#     Fatigue = st.number_input("Fatigue",0,100)
#     Weight_Loss = st.number_input("Weight Loss",0,100)
#     Shortness_of_Breath = st.number_input("Shortness of Breath",0,100)
#     Wheezing = st.number_input("Wheezing",0,100)
#     Swallowing_Difficulty = st.number_input("Swallowing Difficulty",0,100)
#     Clubbing_of_Finger_Nails = st.number_input("Clubbing of Finger Nails",0,100)
#     Frequent_Cold = st.number_input("Frequent COld",0,100)
#     Dry_Coughing = st.number_input("Dry Coughing",0,100)
#     Snoring = st.number_input("Snoring",0,100)
#     inputs = [[Age,Gender,Air_Pollution,Alcohol_use,Dust_Allergy,Occupational_Hazards,Genetic_Risk,Chronic_Lung_Disease,Balanced_Diet,Obesity,Smoking,Passive_Smoker,Chest_Pain,Coughing_of_Blood,Fatigue,Weight_Loss, Shortness_of_Breath,Wheezing,Swallowing_Difficulty,Clubbing_of_Finger_Nails,Frequent_Cold,Dry_Coughing,Snoring]]
#     if st.button('Predict'):
#      loaded_model=pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Cancer.pkl','rb'))
#      prediction=loaded_model.predict(inputs)
#      updated_res = prediction.flatten().astype(float)
#      if(updated_res==0):
#       st.success('There is a High Probabality of getting Cancer Diseases')
#      elif(updated_res==1):
#       st.success('There is Low Probability of getting Cancer Diseases')
#      else :
#       st.success('There is Medium Probability of getting Cancer Diseases')
#       
# 
# def Diabetes_page():
#     #st.markdown("#Diabetes ")
#     #st.sidebar.markdown("# Page 3")
#     st.markdown("<h1 style='text-align: center; color: White;background-color:#e84343'>Diabetes Disease Predictor</h1>", unsafe_allow_html=True)
#     st.markdown("<h3 style='text-align: center; color: Black;'>Drop in The required Inputs and we will do  the rest.</h3>", unsafe_allow_html=True)
#     st.sidebar.header("Diabetes Disease Prediction with the Help of Machine Learning")
#     st.sidebar.markdown("It a Web app that would help the user in determining whether they will get a Diabetes or not in future.",unsafe_allow_html=True)
#     st.sidebar.header("What tools where used to make this?")
#     st.sidebar.markdown("The Support Vector Machine(SVM) Machine learning algorithm was trained by using Diabetes Disease Dataset obtained from kaggle and it was built to make accurate prediction about getting Diabetes or not ")
#     Age = st.number_input("Age of a Patient",0,1)
#     Pregnancies = st.number_input("Number of Pregnancies",0,20)
#     Glucose = st.number_input("Glucose Value",0,1000)
#     BloodPressure = st.number_input("Blood Pressure ",0,500)
#     SkinThickness = st.number_input("Skin Thickness",0.0,100.0)
#     Insulin = st.number_input("Insulin Value",0.00,1000.00)
#     BMI = st.number_input("BMI",0.00,100.00)
#     DiabetesPedigreeFunction = st.number_input("Diabetes Pedigree Function Value ",0.00,10.00)
#     inputs = [[Pregnancies,Glucose,BloodPressure,SkinThickness,Insulin,BMI,DiabetesPedigreeFunction,Age]]
#     if st.button('Predict'):
#      loaded_model=pickle.load(open('/content/drive/MyDrive/Colab Notebooks/Diabetes.pkl','rb'))
#      prediction=loaded_model.predict(inputs)
#      updated_res = prediction.flatten().astype(float)
#      if(updated_res==1):
#       st.success('There is a High Probabality of getting Diabetes')
#      else :
#       st.success('Your are Out of Risk and There is Low Probability of getting Diabetes ')
#       
# 
# page_names_to_funcs = {
#     #"Home": main_page,
#     "Heart": Heart_page,
#     "Kidney": Kidney_page,
#     "Liver": liver_page,
#     "Cancer": Cancer_page,
#     "Diabetes": Diabetes_page
#   }
# 
# selected_page = st.sidebar.selectbox("Select a page", page_names_to_funcs.keys())
# page_names_to_funcs[selected_page]()
# 
# # 1. as sidebar menu
# #with st.sidebar:
#     #selected = option_menu("Main Menu", ["Home", "Heart",'Settings'], 
#         #icons=['house', 'gear'], menu_icon="cast", default_index=1)
#     #selected
# 
# 
# 
# 
#

! pip install pyngrok

from pyngrok import ngrok

ngrok.set_auth_token("2JroVa2BjyXp3a3XRbl7AAAijBn_6pVhrHM53KXU8AE18z5pn")

!ngrok http 80

!nohup streamlit run app.py --server.port 80 &
url= ngrok.connect(port = '80')
print(url)

from pyngrok import ngrok
tunnels=ngrok.get_tunnels()
tunnels
ngrok.kill

